/*
There are different types of selectors.
    Element selectors have nothing preceding them. h1
    A class selector has a dot preceding it. .banana
    An ID selector has a pound sign preceding it. #banana
    A universal selector is * which is used to display everything.
    Attribute selectors can be used to select elements by attribute. You use brackets to select the attribute. [disabled]
*/


#product-overview {
    background: #ff1b68;
    /*
    The padding gets added around the margin of the h1 tag.
    This is because the content of the element is considered the content + any margins it might have.
    Because margins and padding should not overlap, hence padding is added after the margin of the child
    elements.
    */
    padding: 20px;
    border: 5px black solid;
    margin: 20px;
}

/* Space separated selector does not mean direct child but any depth child. */
/*
There are however more combinators
    * Adjacent sibling is denoted with a +. div + p {}. This style would be applied to elements that are on
    the same level. In the example it would be applied to paragraph tags that come right after a div.
    * General sibling is denoted with a ~. div ~ p {}. On the same level as well, but now the element
    doesn't have to come right after the first element. It would just require for the first element to be
    somewhere before the second element on the same level.
    * Child is denoted with a >. div > p {}. Means that the element must be a direct child. So a paragraph
    tag inside the div tag. If there's a separate element wrapping the paragraph tag, then the style wouldn't
    get applied.
    * Descendant uses a whitespace. div p {}. The level doesn't matter here. Just that the paragraph tag should
    be somewhere inside of a div tag. Doesn't matter how deep the nesting of the child is.
 */
#product-overview h1 {
    color: white;
    /* Browsers have default fonts matching with certain values. For example with Chrome you have Helvetica
    matching with sans-serif. sans-serif, serif and monospace are always great values as they use the
    browser defaults. However, if you want to use a specific font, then you have to take a different approach.
    For example Google Fonts could be used to include fonts that don't exist by default. */
    font-family: 'Anton', sans-serif;
    /*
    We could overwrite this styling by setting font-family: inherit; to a h1 tag to make sure that specific
    tag would use inheritance over the specific rule. A better way might be to use an id or a combinator.
    A combinator allows to combine multiple selectors.
    */
}

.section-title {
    color: #2ddf5c;
}

/*
Cascading means that multiple rules can apply to the same element. One rule is a selector with the properties it sets.
So each CSS declaration in this file.
Specifity has to be used in order to resolve conflicts arising from applying multiple rules to the same element.
The order of specifity is as follows, with the last having the lowest specifity.
    Inline styles
    #ID selector
    .class, :pseudo-class and [attribute] selectors
    <Tag> and ::pseudo-element selectors
    Universal selector *

The universal selector, however, is very inefficient, so it's generally better to style the body tag.
*/

/*
Elements inherit styles from their parents both direct or indirect. Inheritance has a very low specifity.
Directly selecting an element has a higher specifity than inheritance.
*/
body {
    font-family: 'Montserrat', sans-serif;
}