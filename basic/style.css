/*
There are different types of selectors.
    Element selectors have nothing preceding them. h1
    A class selector has a dot preceding it. .banana
    An ID selector has a pound sign preceding it. #banana
    A universal selector is * which is used to display everything.
    Attribute selectors can be used to select elements by attribute. You use brackets to select the attribute. [disabled]
    Element selectors can be chained with class etc. It selects an element with that specific property. Ex a.active
*/


#product-overview {
    /*The URL reference to a file can be to a local file or to one online.*/
    /*background: url("./freedom.jpg");*/
    /* Gradients are treated as images, so it has to be added with similar properties
        The direction can be defined using words 'to left bottom' or degrees '30deg'.
        Can also include transparent and an X amount of colors. Additionally you can define
        where one color starts and the other begins. The percentage defines at which height
        it starts.
    */
    /*background-image: linear-gradient(180deg, red 70%, blue 80%, rgba(0, 0, 0, 0.5));*/
    /* The radial gradient allows defining a gradient in a certain shape, unlike linear, which is, well,
     linear. The default is an oval, but you can define a different shape. You can also define the center
     of the gradient with 'at'. The center is the same as the starting position. You can define the starting
     position by using words or percentages for specific control. You can also define the size of the center
     by adding pixels after the shape definition `circle 20px 30px at ...`. There's also keywords that can
     be used instead of the pixels like Â´farthest-corner`
     */
    /*background-image: radial-gradient(circle at 20% 50%, red, blue);*/

    /* Images can have multiple backgrounds. It only makes sense if one is transparent, otherwise you'd
    only see the top-most background. Only one background-color can be used. The color is the fallback
    if the image cannot be loaded. The first rules get stacked on top of the following rules. So we have
    linear-gradient before the image, which means that if the linear-gradient is not transparent, then
    it will be the one that is shown and not the image. Each layer of definition is separated by a comma.*/
    background:
            linear-gradient(to top, rgba(80, 68, 18, 0.6) 10%, transparent),
            url("./freedom.jpg") left 10% bottom 20%/cover no-repeat,
            #ff1b68;
    width: 100%;
    height: 528px;
    padding: 10px;
    margin-top: 42px;
    /*background-clip: border-box; As our image overflowed, then the top and bottom
    had the content underneath the borders. This property defines where the
    image gets clipped. This property actually overrides background-origin. */
    /*background-origin: border-box; /* can be used to define that the border
    should be included on the image, not be around it. The default value is
    padding-box, which means that the content and padding are included. */
    /*!**/
    /*The padding gets added around the margin of the h1 tag.*/
    /*This is because the content of the element is considered the content + any margins it might have.*/
    /*Because margins and padding should not overlap, hence padding is added after the margin of the child*/
    /*elements.*/
    /**!*/
    /*padding: 20px;*/
    /*border: 5px black solid;*/
    /*margin: 20px;*/

    /* Adding width 100% would do nothing for this element, as it's a div. Block elements take up 100% of their area anyway. */
    /*
    Setting height to 100% wouldn't do much either. This is because it takes up as much space as the parent container would allow it to take up.
    It would only expand by the size of the margins that the header tag has. This is because while the parent takes up a larger area, then
    the parent only takes up as much space as its children require it to take up. If the child tried to take up 100%, then it would create a
    kind of infinite loop, so it cancels out. If you'd manually set the size of the parent to N pixels, then the 100% size would
    have an effect. Then it would take up 100% of the height of the parent.
    Basically, height percentages are calculated based on the height of the parent element. If say a parent element is 500 pixels and a child
    says that it is 100% height, then it'll be 500 pixels in size. This would apply for all the children that have the 100% constraint.
    So two elements with 100% height would both be 500 pixels each, causing the total area taken of the children to be 1000 pixels, while
    the parent element is 500 pixels.
    As the height percentages are dependent on the parent, then in order to have an element take up 100% of the page, then
    you'd have to pass to the very top element, which is the html tag, then the 100% would start propagating down. This is a
    more legacy option, though. There are more modern units to do this.
    */

    /*
    All elements have a certain way of calculating the width and height of an element. The default behavior is called
    content-box, it can be overridden using the box-sizing property. Border-box can be used to make it include the
    padding and border. There is no way to make it include the margin.
    box-sizing: border-box; is often the more convenient way to size the elements, so you may often find it being used
    as the default.
    */
}

/* Space separated selector does not mean direct child but any depth child. */
/*
There are however more combinators
    * Adjacent sibling is denoted with a +. div + p {}. This style would be applied to elements that are on
    the same level. In the example it would be applied to paragraph tags that come right after a div.
    * General sibling is denoted with a ~. div ~ p {}. On the same level as well, but now the element
    doesn't have to come right after the first element. It would just require for the first element to be
    somewhere before the second element on the same level.
    * Child is denoted with a >. div > p {}. Means that the element must be a direct child. So a paragraph
    tag inside the div tag. If there's a separate element wrapping the paragraph tag, then the style wouldn't
    get applied.
    * Descendant uses a whitespace. div p {}. The level doesn't matter here. Just that the paragraph tag should
    be somewhere inside of a div tag. Doesn't matter how deep the nesting of the child is.
 */
#product-overview h1 {
    color: white;
    /* Browsers have default fonts matching with certain values. For example with Chrome you have Helvetica
    matching with sans-serif. sans-serif, serif and monospace are always great values as they use the
    browser defaults. However, if you want to use a specific font, then you have to take a different approach.
    For example Google Fonts could be used to include fonts that don't exist by default. */
    font-family: 'Anton', sans-serif;
    /*
    We could overwrite this styling by setting font-family: inherit; to a h1 tag to make sure that specific
    tag would use inheritance over the specific rule. A better way might be to use an id or a combinator.
    A combinator allows to combine multiple selectors.
    */
}

.section-title {
    color: #2ddf5c;
    text-align: center;
}

.plan__list {
    width: 80%;
    margin: auto;
    text-align: center;
}

.plan {
    background: #d5ffdc;
    text-align: center;
    padding: 16px;
    margin: 8px;
    display: inline-block;
    width: 30%;
    vertical-align: middle;
}

.plan--highlighted {
    background: #19b84c;
    color: white;
    /* Used to define a shadow either outside or inside
    First is the shadow on the X axis, the second is on the Y axis. Third is the blurriness, the fourth
    is the spread beyond the borders. Finally the color.
    A color can be defined with a color function. rgba() allows to set the color channels and opacity.
    */
    box-shadow: 2px 2px 2px 2px rgba(0, 0, 0, 0.5);
}

.plan__annotation {
    background: white;
    color: #19b84c;
    padding: 5px 0;
    border-radius: 8px;
    box-shadow: 2px 2px 2px 2px rgba(0, 0, 0, 0.3);
}

.plan__features {
    list-style: none;
    margin: 0;
    padding: 0;
}

.plan__feature {
    margin: 8px 0;
}

.plan__title {
    color: #0e4f1f;
}

.plan__price {
    color: #858585;
}

.plan--highlighted .plan__price {
    color: #0e4f1f;
}

.plan--highlighted .plan__title {
    color: white;
}


#key-features {
    background: #ff1b68;
    margin-top: 80px;
    padding: 16px;
}

#key-features .section-title {
    color: white;
    margin: 32px;
}

.key-features__list {
    list-style: none;
    margin: 0;
    padding: 0;
    text-align: center;
}

.key-feature {
    display: inline-block;
    width: 30%;
    vertical-align: top;
}

.key-feature__description {
    color: white;
    font-weight: bold;
    font-size: 20px;
}

.key-feature__image {
    background: #ffcede;
    width: 128px;
    height: 128px;
    border: 2px solid #424242;
    /* Setting a border radius of 50% creates a perfect circle. */
    border-radius: 50%;
    /* Centers the element horizontally. */
    margin: auto;
}
