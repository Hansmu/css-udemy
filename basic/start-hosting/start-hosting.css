main {
    padding-top: 4rem;
}

.signup-title {
    text-align: center;
    font-size: 1.8rem;
    color: #ff5454;
}

.signup-form {
    padding: 1rem;
    display: grid;
    grid-auto-rows: minmax(2rem, auto);
    grid-row-gap: 0.5rem;
}

.signup-form label {
    font-weight: bold;
}

.signup-form label,
.signup-form input,
.signup-form select {
    display: block;
    width: 100%;
}

.signup-form input:not([type="checkbox"]),
.signup-form select {
    border: 1px solid #ccc;
    padding: 0.2rem 0.5rem;
    /* By default the browser sets the font itself. As we want the inputs to have the same font as the rest,
    then we set it to inherit. */
    font: inherit;
}

/*
When you look at the input element focused, then there's an outline. An outline isn't exactly a border.
An outline always comes after the border, but isn't part of the box model.
*/
.signup-form input:focus,
.signup-form select:focus {
    outline: none;
    background: #d8f3df;
    border-color: #2ddf5c;
}

/* [type] can be used to select an element with a specific attribute <input type="text"/>.
You can also select ones with a specific attribute value. [type="email"] {} <input type="email"/>.
You could also select an element that has a certain value among several. [lang~="en-us"] {} <p lang="en-us en-gb"></p>
An element with a specific attribute value or it as a prefix. It has to be followed by a dash if it's a prefix.
[lang|="en"] {} <p lang="en-us">Hi!</p>
An element with a specific attribute value prefix. It's more flexible than the one with the pipe.
[href^="#"] {} <a href="#all"></a>
An element with a specific attribute value suffix.
[href$=".de"] {} <a href="ab.de"></a>
An element that contains a value.
[src*="cdn"] {} <img src="i.cdn.com">
Check values case-insensitively
[src*="cdn" i] {} <img src="i.CDN.com">
*/

.signup-form input[type="checkbox"],
.signup-form input[type="checkbox"] + label{
    display: inline-block;
    width: auto;
    vertical-align: middle;
}

.signup-form button[type="submit"] {
    display: block;
    margin-top: 1rem;
}


.signup-form input[type="checkbox"] {
    border: 1px solid #ccc;
    background: white;
    width: 1rem;
    height: 1rem;
    /* Just like the select element, a checkbox is a special type of input. The browser adds special keywords
    to it to make sure they work as they do. When you remove this, then there won't be any signal to the user
    that the element is being checked and unchecked, but behind the scenes it is still happening. The appeareance
     did it for us before, but now that we've overwritten it, then we have to do it manually. */
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
}

.signup-form input[type="checkbox"]:checked {
    background: #2ddf5c;
    border: #0e4f1f;
}

.signup-form input.invalid, /* This is the manual approach, but there's also a pseudo selector. */
.signup-form select.invalid,
/* This would be triggered on the email, as the browser would automatically try to validate the
 type email element.
 The invalid selector has a lower priority than the not that we have above, so this overwrites that.
 As this is a temporary util class, then important is a valid use case here.
 */
.signup-form :invalid { /* There's also a :valid pseudoselector */
    border-color: red !important;
    background: #faacac;
}

@media (min-width: 40rem) {
    .signup-form {
        margin: auto;
        width: 30rem;
        grid-template-columns: 10rem auto;
        grid-row-gap: 1rem;
    }

    .signup-form [id='title'] {
        grid-column: span 2;
    }

    .signup-form__checkbox {
        grid-column: span 2;
    }
}