/* It's better to import the fonts in a CSS file, as there's a lower chance that people will forget
 to import the CSS file, rather than the font link in the HTML file. You'd have one central location where
 they are imported then as well. We need to specify the different weights that we want to import specifically.
 If we don't specify weights, then we just get the normal font weight, which is 400. If you want italic
 and what not, then you'd have to add 400i. The browser can apply an italic style on its own, but it won't
 look exactly like on the example font page. */
@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;900&display=swap');

/* The root selector selects the entire document. You could also define the variables in a more specific selector, but
that'd mean that the variable would only be available inside of that selector. Defining it in the :root it creates a global
variable. */
:root {
    --dark-green: #0e4f1f;
    --highlight-color: #ff1b68;
}

html {
    height: 100%;
}

body {
    /* You start with the most specific thing you have. You can have multiple fallbacks with the specific
     font families as well.*/
    font-family: 'Montserrat', sans-serif;
    margin: 0;
    /* All child elements that are positioned non-statically won't be part of the grid. E.g. static, absolute. */
    display: grid;
    /* The footer has a dynamic size, but cannot simply use auto on it, as then the two autos would share the content
    between the two of them, causing irregular sizes.
    fit-content allows use to specify a min height that it will have. In our example it would be 8rem. Otherwise it
    takes up as much space as it needs.*/
    grid-template-rows: 3.5rem auto fit-content(8rem);
    grid-template-areas: "header"
                         "main"
                         "footer";
    height: 100%;
}

main {
    grid-area: main;
}

* {
    box-sizing: border-box;
}

.main-header {
    background: #2ddf5c;
    padding: 0.5rem 1rem;
    display: flex;
    align-items: center;
    justify-content: space-between;
}

.main-header__brand {
    /* You can add a fallback to the color. This isn't a fallback if the browser does not support variables, but it's a
     fallback to if you forgot to load the file with the variable in it or such. It's most useful with third party
     libraries where you aren't sure if it's defined or not. */
    color: var(--dark-green, #0e4f1f);
    text-decoration: none;
    font-weight: bold;
}

.main-header__brand img {
    height: 2.5rem;
    vertical-align: middle;
}

.main-nav {
    display: none;
}

.main-nav__items {
    display: flex;
    margin: 0;
    padding: 0;
    list-style: none; /* Reset the default behavior and remove bullet points. Padding 0 already does that, though. */
}

.main-nav__item {
    margin: 0 1rem;
}

.main-nav__item a,
.mobile-nav__item a{
    color: var(--dark-green);
    text-decoration: none;
    font-weight: bold;
    padding: 3px 0;
}

.main-nav__item a:hover,
.main-nav__item a:active{
    color: white;
    border-bottom: 2px solid white;
}

.main-nav__item--cta a,
.mobile-nav__item--cta a {
    color: white;
    background: var(--highlight-color);
    padding: 0.5rem 1rem;
    border-radius: 8px;
}

.main-nav__item--cta a:hover,
.main-nav__item--cta a:active,
.mobile-nav__item--cta a:hover,
.mobile-nav__item--cta a:active {
    background: white;
    color: var(--highlight-color);
    border-bottom: none;
}

.main-footer {
    background: black;
    padding: 2rem;
    margin-top: 3rem;
    grid-area: footer;
}

.main-footer__links {
    list-style: none;
    margin: 0;
    padding: 0;
    display: flex;
    flex-direction: column;
    align-items: center;
}

.main-footer__link {
    margin: 0.5rem 0;
}

.main-footer__link a {
    color: white;
    text-decoration: none;
}

.main-footer__link a:hover,
.main-footer__link a:active {
    color: #ccc;
}


.button {
    background: var(--dark-green);
    color: white;
    font: inherit; /* To force inheritance instead of the browser overwriting the fonts. */
    border: 2px solid var(--dark-green);
    padding: 0.5rem;
    border-radius: 8px;
    font-weight: bold;
    cursor: pointer;
}

.button:hover,
.button:active {
    background: white;
    color: var(--dark-green);
}
.button:focus {
    outline: none;
}

.button[disabled] {
    cursor: not-allowed;
    border: #a1a1a1;
    background: #ccc;
    color: #a1a1a1;
}

.main-header {
    position: fixed;
    width: 100%;
    top: 0;
    z-index: 50;
}

.backdrop {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    z-index: 100;
    background: rgba(0, 0, 0, 0.5);
    /* If we're switching been displaying or not, then the transition is omitted and a hacky solution via JS has to be applied.
     Have to break the transition and display into separate event cycles. */
    display: none;
    opacity: 0;
    transition: opacity 200ms linear;
}

.modal {
    position: fixed;
    /* There are a list of properties that transition supports. That's why opacity is used for displaying and transform is
     used for location changing. */
    opacity: 0;
    transform: translateY(-3rem);
    /* First parameter is required and it defines what property do you want to watch for changes. Can set it to all to
     watch for all changes or just a comma separated list for what to watch. Secondly define what the time frame is over
     which the animation plays. Additionally, adding a timing function is possible to define how the animation progresses over time.
     Ex ease-in starts slower and ends faster. The last parameter is the initial display of the animation.*/
    transition: opacity 200ms ease-in, transform 500ms;
    z-index: 200;
    top: 20%;
    left: 30%;
    width: 40%;
    background: white;
    padding: 1rem;
    border: 1px solid #ccc;
    box-shadow: 1px 1px 1px rgba(0, 0, 0, 0.5);
}

.modal__title {
    text-align: center;
    margin: 0 0 1rem 0;
}

.modal__actions {
    text-align: center;
}

.modal__action {
    border: 1px solid var(--dark-green);
    background: var(--dark-green);
    text-decoration: none;
    color: white;
    font: inherit;
    padding: 0.5rem 1rem;
    cursor: pointer;
}

.modal__action:hover,
.modal__action:active {
    background: #2ddf5c;
    border-color: #2ddf5c;
}

.modal__action--negative {
    background: red;
    border-color: red;
}

.modal__action--negative:hover,
.modal__action--negative:active {
    background: #ff5454;
    border-color: #ff5454;
}

.mobile-nav {
    display: none;
    position: fixed;
    z-index: 101;
    top: 0;
    left: 0;
    background: white;
    width: 80%;
    height: 100vh;
}

.mobile-nav__items {
    width: 90%;
    height: 100%;
    list-style: none;
    margin: 0 auto;
    padding: 0;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
}

.mobile-nav__item {
    margin: 1rem 0;
}

.mobile-nav__item a {
    font-size: 1.5rem;
}

.toggle-button {
    width: 3rem;
    background: transparent;
    border: none;
    cursor: pointer;
    padding-top: 0;
    padding-bottom: 0;
    vertical-align: middle;
}

.toggle-button:focus {
    outline: none;
}

.toggle-button__bar {
    width: 100%;
    height: 0.2rem;
    background: black;
    display: block;
    margin: 0.6rem 0;
}

.open {
    display: initial !important;
    opacity: 1 !important;
    transform: translateY(0) !important;
}

@media (min-width: 40rem) {
    .main-nav {
        display: flex;
    }

    .toggle-button {
        display: none;
    }

    .main-footer__link {
        margin: 0 2rem;
    }

    .main-footer__links {
        flex-direction: row;
        justify-content: center;
    }
}

.main-nav__item--cta {
    /* Define the animation, its duration, its initial delay, animation cycles and animation direction. Forwards and
    backwards can be used to define whether to keep the end state or the start state as its final state.
     We're currently defining 8 cycles. With alternate that means 4 forward cycles and 4 backward cycles.
     Duration and delay are the only values for which the order matters. The rest don't.
     The transition function gets triggered on every keyframe change. */
    animation: wiggle 400ms 3s 8 ease-in;
}

/* Animations are like transitions, except more powerful. Using from and to is the most basic setup for an animation. */
@keyframes wiggle {
    /*from {*/
    /*    transform: rotateZ(0);*/
    /*}*/

    /*to {*/
    /*    transform: rotateZ(10deg);*/
    /*}*/

    0% {
        transform: rotateZ(0);
    }

    50% {
        transform: rotateZ(-10deg);
    }

    100% {
        transform: rotateZ(10deg);
    }
}