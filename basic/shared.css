/*
Cascading means that multiple rules can apply to the same element. One rule is a selector with the properties it sets.
So each CSS declaration in this file.
Specifity has to be used in order to resolve conflicts arising from applying multiple rules to the same element.
The order of specifity is as follows, with the last having the lowest specifity.
    Inline styles
    #ID selector
    .class, :pseudo-class and [attribute] selectors
    <Tag> and ::pseudo-element selectors
    Universal selector *

The universal selector, however, is very inefficient, so it's generally better to style the body tag.
*/

/*
Elements inherit styles from their parents both direct or indirect. Inheritance has a very low specifity.
Directly selecting an element has a higher specifity than inheritance.
*/
body {
    font-family: 'Montserrat', sans-serif;
    /* The browser adds margins to the body element by default. */
    margin: 0;
}

* {
    /*
    Cannot add this to the body element, as the inheritance doesn't work there. The reason is that the browser adds
    its own model for block level elements. So each element has to be manually overridden to make sure that border-box
    works.
    */
    box-sizing: border-box;
}

.main-header {
    background: #2ddf5c;
    padding: 0.5rem 1rem;
}

.main-header > div {
    display: inline-block;
    /* Vertical align is used to vertically align the element. Can be middle, top etc.*/
    vertical-align: middle;
}

.main-header__brand {
    color: #0e4f1f;
    text-decoration: none;
    font-weight: bold;
    font-size: 1.5rem;
    vertical-align: middle;

    /* height: 22px; This will not work in resizing the image, as this is the container.
    If you use an image tag that points to an image, then the default behaviour is that
    the height and width of the image will be used, regardless of the size of the parent
    element.
    */

    height: 22px;
    display: inline-block;
}

.main-header__brand img {
    /*height: 22px;*/
    /* height: 100%; Does not work here, because it's cause it to use the height of the original image.
    However, if setting the surrounding element to be an inline-block element, then a percentage works.*/

    /* There isn't much more styling that we can do when using <img> tags. If you want to do more complex
    styling, then use a background image. That is cover and the likes. Borders and such can still be set.
    The downside is that it's worse for accessibility because it doesn't have its own specific element. */
    height: 100%;
}

.main-nav {
    display: inline-block;
    text-align: right;
    /*
    Not the best approach to read the pixels from a rendered page like that, but it'll work for now.
    Taking the exact size of the element won't work either, as a new line in our editor will add a new inline element with
    the content being a space. So we need to subtract a little bit extra. A hacky solution and a better solution will follow.
    */
    width: calc(100% - 122px);
    vertical-align: middle;
}

.main-nav__items {
    margin: 0;
    padding: 0;
    list-style: none; /* Reset the default behavior and remove bullet points. Padding 0 already does that, though. */
}

/*
Block level elements take up an entire line. An inline element does not, so several inline elements can be on the same line.
Both use the box model, but for an inline element we cannot set the margin top and bottom, as they aren't positioned in the
flow as block level elements are. The default behavior for elements can be changed using the display property.
inline-block mixes the functions. The elements can still go next to each other, but they behave like block level elements
when setting top and bottom margins, paddings etc, which are not possible for inline elements.

Inline boxes are laid out horizontally in a box called a line box. If there isn't enough horizontal space to fit all elements
into a single line, another line box is created under the first on. A single inline element may then be split across lines.
When an inline box is split between lines, then it is still logically a single box. So its horizontal paddings are applied
to the start and end of the box, not on every line it occupies. Vertical padding and borders are still applied. However,
it will not push away elements above or below it.
*/
.main-nav__item {
    display: inline-block;
    margin: 0 1rem;
}

/* A separate class would have a higher performance, but in most cases you wouldn't even notice the difference. */
.main-nav__item a,
.mobile-nav__item a{
    color: #0e4f1f;
    /* Wouldn't work when setting on the parent, as everything that targets an element directly has a higher priority then
     inheritance.*/
    text-decoration: none;
    font-weight: bold;
    padding: 3px 0;
}

/*
Pseudo classes let us define styles for an element's specific state. Like hover and active. Defined with a single :, so :hover
Pseudo elements let us define styles for a specific part of an element. Defined with a double :, so ::after
*/
.main-nav__item a:hover,
    /* A comma can be used to group combinators. A comma is not a combinator. */
.main-nav__item a:active{
    color: white;
    border-bottom: 2px solid white;
}

/*!* We can add extra content to an element using the after selector *!*/
/*.main-nav__item a::after {*/
/*    content: " (Link)";*/
/*    color: red;*/
/*}*/

/*
A :not() pseudoselector can be used to select all elements that are not with something.
The example selects any anchor tag that does not have the active class. Generally there's a
positive way of writing the same rules. It's easier to mess up with the not selector and you might
start adding needless complexity. :not() also takes more computation.
a:not(.active) {
    color: blue;
}
*/

/*
As we want to override the styles applied by another rule, then the order in which they are defined in
the CSS file does matter, because they have the same specifity.
*/
.main-nav__item--cta a,
.mobile-nav__item--cta a {
    color: white;
    background: #ff1b68;
    padding: 0.5rem 1rem;
    border-radius: 8px;
}

/*
As we don't want any of the original styling, then we have to overwrite all of the properties, otherwise
it'll still use the existing properties from the other class.
*/
.main-nav__item--cta a:hover,
.main-nav__item--cta a:active,
.mobile-nav__item--cta a:hover,
.mobile-nav__item--cta a:active {
    background: white;
    color: #ff1b68;
    border-bottom: none;
}

.main-footer {
    background: black;
    padding: 2rem;
    margin-top: 3rem;
}

.main-footer__links {
    list-style: none;
    margin: 0;
    padding: 0;
    text-align: center;
}

.main-footer__link {
    display: inline-block;
    margin: 0 2rem;
}

.main-footer__link a {
    color: white;
    text-decoration: none;
}

.main-footer__link a:hover,
.main-footer__link a:active {
    color: #ccc;
}


.button {
    background: #0e4f1f;
    color: white;
    font: inherit; /* To force inheritance instead of the browser overwriting the fonts. */
    border: 2px solid #0e4f1f;
    padding: 0.5rem;
    border-radius: 8px;
    font-weight: bold;
    cursor: pointer;
}

.button:hover,
.button:active {
    background: white;
    color: #0e4f1f;
}

/* The outline isn't a part of the box model. The outline is an additional border like thing that's
applied in between the border and margin. */
.button:focus {
    outline: none;
}

/* Positioning elements
The default behavior of elements is caused by the fact that they have position: static set on them.
You have to define where the element goes if you remove the static property from them and use something else.
top, right, bottom, left properties can be used to position the element once it's not static anymore.

When you set position to be fixed, then the element won't be occupying space where it used to before and
another element will take up its space, thus it is removed from the document flow. The element will then
start behaving like an inline-block element, regardless if it was an inline or a block element before.
The positioning of this element then only depends on the viewport. So if you set the top position to be 0,
then it will be sticking to the very top of the page.
*/
.main-header {
    position: fixed;
    width: 100%;
    top: 0;
    z-index: 1;
}

/* UNITS
There's a default font size to elements that the browser applies. If the user changes the browser defaults,
then those elements change. However, the elements that we have defined a font size for do not change. So
half of the page gets resized and the other doesn't. There are different size definitions, which could be
grouped into sections.
 The sections are as follows:
     * Absolute lengths - Mostly ignore user settings. Examples are px, cm, mm. Cm etc should not be used as they're
     for paper, not for web development. The different displays measure differently in cms.
         * pixels (px) - pixels are not relative to anything, only its own defined pixels.

     * Viewport lengths - adjust to current viewport. Examples are vh, vw, vmin, vmax. The viewport is the
     visible part in our browser.
         * viewport height (vh) - specifies how much of the viewport height is taken up by this element in
         terms of percentages.
         * viewport width (vw) - specifies how much of the viewport width is taken up by this element in
         terms of percentages.

     * Font-relative lengths - adjust to default font size. Examples are rem, em and more. Rem and em are
     pretty much the default ones to use.
         * root em (rem) - this means that it will take the browser defined font and multiplies it with its
         multiplier. It's dependent on the root font size value, so the HTML element.
         * em (em) - this uses the font size of the parent and does it relative to that. The problem is that
         this can become a mess. It isn't the best thing to use, but it has its use cases. Just have to be
         careful when using it.

     * Percentages - there are 3 rules to remember.
      - A fixed position element percentages are related to the viewport.
      - Absolute element's percentage refers to the ancestor's content + padding size. An ancestor is the closest
      parent element to the absolute, within its hieararhcy, that is not positioned with static. If you do
      not have one, then it uses the viewport, just as fixed does.
      - A static/relative element uses an ancestor's content size. Does not include padding as with absolute.
      In this case the ancestor is simply the closest element that's a block level element.
         * percentages (%) -

The units matter for the following properties:
 * font-size;
 * padding;
 * border;
 * margin;
 * width;
 * height;
 * top;
 * bottom;
 * left;
 * right;
*/

/* Which unit should you choose? It's not really a rule that's set in stone, but what's worked for the
lecturer.
Property                    | "Recommended" unit
----------------------------|----------------------------------------------
font-size (root element)    |   %; none;
font-size                   |   rem (em => Children only, don't chain it)
padding, margin             |   rem
border                      |   px
width, height               |   %; vw/vh
top, bottom, left, right    |   %
*/

.backdrop {
    position: fixed;
    top: 0;
    left: 0;
    /* In the case of fixed 100% and vh don't make a difference.
    vmin - it uses the smaller dimension of viewport width and height. vmax does the opposite.
    */
    width: 100vw;
    height: 100vh;
    z-index: 100;
    background: rgba(0, 0, 0, 0.5);
    display: none;
}

.modal {
    position: fixed;
    display: none;
    z-index: 200;
    top: 20%;
    left: 30%;
    width: 40%;
    background: white;
    padding: 1rem;
    border: 1px solid #ccc;
    box-shadow: 1px 1px 1px rgba(0, 0, 0, 0.5);
}

.modal__title {
    text-align: center;
    margin: 0 0 1rem 0;
}

.modal__actions {
    text-align: center;
}

.modal__action {
    border: 1px solid #0e4f1f;
    background: #0e4f1f;
    text-decoration: none;
    color: white;
    font: inherit;
    padding: 0.5rem 1rem;
    cursor: pointer;
}

.modal__action:hover,
.modal__action:active {
    background: #2ddf5c;
    border-color: #2ddf5c;
}

.modal__action--negative {
    background: red;
    border-color: red;
}

.modal__action--negative:hover,
.modal__action--negative:active {
    background: #ff5454;
    border-color: #ff5454;
}

.mobile-nav {
    display: none;
    position: fixed;
    z-index: 101;
    top: 0;
    left: 0;
    background: white;
    width: 80%;
    height: 100vh;
}

.mobile-nav__items {
    width: 90%;
    height: 100%;
    list-style: none;
    margin: 10% auto;
    padding: 0;
    text-align: center;
}

.mobile-nav__item {
    margin: 1rem 0;
}

.mobile-nav__item a {
    font-size: 1.5rem;
}

.toggle-button {
    width: 3rem;
    background: transparent;
    border: none;
    cursor: pointer;
    padding-top: 0;
    padding-bottom: 0;
    vertical-align: middle;
}

.toggle-button:focus {
    outline: none;
}

.toggle-button__bar {
    width: 100%;
    height: 0.2rem;
    background: black;
    display: block;
    margin: 0.6rem 0;
}