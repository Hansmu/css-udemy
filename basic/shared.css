/*
Cascading means that multiple rules can apply to the same element. One rule is a selector with the properties it sets.
So each CSS declaration in this file.
Specifity has to be used in order to resolve conflicts arising from applying multiple rules to the same element.
The order of specifity is as follows, with the last having the lowest specifity.
    Inline styles
    #ID selector
    .class, :pseudo-class and [attribute] selectors
    <Tag> and ::pseudo-element selectors
    Universal selector *

The universal selector, however, is very inefficient, so it's generally better to style the body tag.
*/

/*
Elements inherit styles from their parents both direct or indirect. Inheritance has a very low specifity.
Directly selecting an element has a higher specifity than inheritance.
*/
body {
    font-family: 'Montserrat', sans-serif;
    /* The browser adds margins to the body element by default. */
    margin: 0;
}

* {
    /*
    Cannot add this to the body element, as the inheritance doesn't work there. The reason is that the browser adds
    its own model for block level elements. So each element has to be manually overridden to make sure that border-box
    works.
    */
    box-sizing: border-box;
}

.main-header {
    background: #2ddf5c;
    padding: 8px 16px;
}

.main-header > div {
    display: inline-block;
    /* Vertical align is used to vertically align the element. Can be middle, top etc.*/
    vertical-align: middle;
}

.main-header__brand {
    color: #0e4f1f;
    text-decoration: none;
    font-weight: bold;
    font-size: 22px;
}

.main-nav {
    display: inline-block;
    text-align: right;
    /*
    Not the best approach to read the pixels from a rendered page like that, but it'll work for now.
    Taking the exact size of the element won't work either, as a new line in our editor will add a new inline element with
    the content being a space. So we need to subtract a little bit extra. A hacky solution and a better solution will follow.
    */
    width: calc(100% - 67px);
    vertical-align: middle;
}

.main-nav__items {
    margin: 0;
    padding: 0;
    list-style: none; /* Reset the default behavior and remove bullet points. Padding 0 already does that, though. */
}

/*
Block level elements take up an entire line. An inline element does not, so several inline elements can be on the same line.
Both use the box model, but for an inline element we cannot set the margin top and bottom, as they aren't positioned in the
flow as block level elements are. The default behavior for elements can be changed using the display property.
inline-block mixes the functions. The elements can still go next to each other, but they behave like block level elements
when setting top and bottom margins, paddings etc, which are not possible for inline elements.

Inline boxes are laid out horizontally in a box called a line box. If there isn't enough horizontal space to fit all elements
into a single line, another line box is created under the first on. A single inline element may then be split across lines.
When an inline box is split between lines, then it is still logically a single box. So its horizontal paddings are applied
to the start and end of the box, not on every line it occupies. Vertical padding and borders are still applied. However,
it will not push away elements above or below it.
*/
.main-nav__item {
    display: inline-block;
    margin: 0 16px;
}

/* A separate class would have a higher performance, but in most cases you wouldn't even notice the difference. */
.main-nav__item a {
    color: #0e4f1f;
    /* Wouldn't work when setting on the parent, as everything that targets an element directly has a higher priority then
     inheritance.*/
    text-decoration: none;
    font-weight: bold;
    padding: 3px 0;
}

/*
Pseudo classes let us define styles for an element's specific state. Like hover and active. Defined with a single :, so :hover
Pseudo elements let us define styles for a specific part of an element. Defined with a double :, so ::after
*/
.main-nav__item a:hover,
    /* A comma can be used to group combinators. A comma is not a combinator. */
.main-nav__item a:active{
    color: white;
    border-bottom: 2px solid white;
}

/*!* We can add extra content to an element using the after selector *!*/
/*.main-nav__item a::after {*/
/*    content: " (Link)";*/
/*    color: red;*/
/*}*/

/*
A :not() pseudoselector can be used to select all elements that are not with something.
The example selects any anchor tag that does not have the active class. Generally there's a
positive way of writing the same rules. It's easier to mess up with the not selector and you might
start adding needless complexity. :not() also takes more computation.
a:not(.active) {
    color: blue;
}
*/

/*
As we want to override the styles applied by another rule, then the order in which they are defined in
the CSS file does matter, because they have the same specifity.
*/
.main-nav__item--cta a {
    color: white;
    background: #ff1b68;
    padding: 8px 16px;
    border-radius: 8px;
}

/*
As we don't want any of the original styling, then we have to overwrite all of the properties, otherwise
it'll still use the existing properties from the other class.
*/
.main-nav__item--cta a:hover,
.main-nav__item--cta a:active {
    background: white;
    color: #ff1b68;
    border-bottom: none;
}

.main-footer {
    background: black;
    padding: 32px;
    margin-top: 48px;
}

.main-footer__links {
    list-style: none;
    margin: 0;
    padding: 0;
    text-align: center;
}

.main-footer__link {
    display: inline-block;
    margin: 0 16px;
}

.main-footer__link a {
    color: white;
    text-decoration: none;
}

.main-footer__link a:hover,
.main-footer__link a:active {
    color: #ccc;
}


.button {
    background: #0e4f1f;
    color: white;
    font: inherit; /* To force inheritance instead of the browser overwriting the fonts. */
    border: 2px solid #0e4f1f;
    padding: 8px;
    border-radius: 8px;
    font-weight: bold;
    cursor: pointer;
}

.button:hover,
.button:active {
    background: white;
    color: #0e4f1f;
}

/* The outline isn't a part of the box model. The outline is an additional border like thing that's
applied in between the border and margin. */
.button:focus {
    outline: none;
}

/* Positioning elements
The default behavior of elements is caused by the fact that they have position: static set on them.
You have to define where the element goes if you remove the static property from them and use something else.
top, right, bottom, left properties can be used to position the element once it's not static anymore.

When you set position to be fixed, then the element won't be occupying space where it used to before and
another element will take up its space, thus it is removed from the document flow. The element will then
start behaving like an inline-block element, regardless if it was an inline or a block element before.
The positioning of this element then only depends on the viewport. So if you set the top position to be 0,
then it will be sticking to the very top of the page.
*/
.main-header {
    position: fixed;
    width: 100%;
}