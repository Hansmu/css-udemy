/* We can use @font-face to import a local file for a font.
The negative thing is that we have to create a separate import for bold,
italic etc.*/
@font-face {
    /* First we define what name the font family will be called with. */
    font-family: 'AnonymousPro';
    /* Then we have to define where we can find the font. As always,
    there can be issues with IE. This can happen when you have the
    file name capitalized. In order to avoid that, then the font file
    should start with a lower-case letter. Keeping it as upper right now,
    though, as it's just a tutorial. */
    src: url("AnonymousPro-Regular.ttf");
}

/* Fonts can get pretty big and loading them can become slow. There is a way to optimize them by using
the font-display property. It's a property that's applied to @font-face blocks.
The possible values for it are swap; block; fallback; optional and by default it gets set to auto.
There are two phases to loading a font.
1) block-period - in this section there will be no font displayed, but the blocks would be reserved.
That is, the height of the area would be reserved, but there's nothing in it. Only invisible text.
If there is no block period, then the fallback font would be immediately visible. So a fallback comes
after the block period.
2) swap-period - where the browser can swap the fallback fonts for the actual fonts.

So with the defined values, the following behaviours can happen.
With swap it does not have a block-period and tries to swap out the fallback once the font
gets loaded.
With block there's a short block period and the swap happens when the browser manages to finish
loading the font.
With fallback there's a very short block period and then a short swap period. So there's a small window
where the browser has a chance to load our custom font. If it manages in the small period, then it will be
used, otherwise it's not used.
With optional there's a very short block period. There's no swap period. The browser decides based on our
connection speed if it would load the custom font or the fallback.
With auto most browsers choose block.

As always, there's no IE support for this property. But also there are some other browsers that don't
support it.
*/

@font-face {
    font-family: 'AnonymousPro';
    /* We're using the true type format here. Most browser support it, but as usual, IE has partial support.
    WOFF is something that is supported even in IE, though. The URLs can have a number of imports as well
     src: url("AnonymousPro-Bold.woff2") format("woff2"),
         url("AnonymousPro-Bold.woff") format("woff"),
         url("AnonymousPro-Bold.ttf") format("truetype");

     There are other font types as well, but there's no point in using them as support for the rest are
     very limited.
     */
    src: url("AnonymousPro-Bold.ttf");
    font-weight: 700;
}

main {
    padding-top: 2rem;
}

/*
For absolute and fixed position values, the element is taken out of the document flow. With relative, however,
it still remains in the document flow, except you can still apply top, right etc. to it. With relative the
movement properties move them from the element's initial position. It can happen that you exit the parent
element when using this. If you'd add overflow: hidden; then the element could be hidden away once it goes
out of bounds from the parent.
If you'd add the overflow hidden to the body element, then that wouldn't work. This is because the property
would be sent to the html tag and it has no effect there. However, you have overflow: hidden on both the
html and body element, then it works. Could also just have auto on the html element.
position:sticky is a hybrid of relative and fixed. When defining a top property, then it would define how
large does the space have to be between the top of the viewport and the border of the element before it
turns into a fixed element. When scrolling, then it gets limited by the parent. It doesn't extend over
the parent component.
*/
.package {
    border: 2px solid #0e4f1f;
    border-left: none;
    width: 80%;
    margin: 1rem 0;
    border-radius: 4px;
    box-shadow: 2px 2px 2px 2px rgba(0, 0, 0, 0.3);
    position: relative;
}

.package:hover,
.package:active,
#free:hover,
#free:active {
    border: 2px solid #ffcede;
}

.package a {
    text-decoration: none;
    color: inherit;
    padding: 2rem;
    display: block;
}

.package__sub-title {
    color: #979797;
}

.package__description {
    border: 2px solid #0e4f1f;
    background: white;
    color: #0e4f1f;
    padding: 1rem;
    font-size: 1.25rem;
    font-family: 'AnonymousPro', sans-serif;
    /*font-family: 'Roboto', sans-serif;*/
    /*!* normal = 400, bold = 700*/
    /* The larger the value, the thicker it is. The smaller, the thinner.*/
    /* *!*/
    /*font-weight: 900;*/

    /* Some examples of font properties:
        * font-size to define the size
        * font-variant to define character transformations. E.g small characters to caps.
        * font-stretch to define different ways how to stretch the text. It's not supported too much by
        created fonts. The browser support is good, though.
        * letter-spacing can be used to add space between your letters.
        * white-space can be used to define how whitespaces are treated inside of our elements.
    */

    /* By default the line height depends on the font family that we are using. If we use normal, then
     it defaults to the font family line height. However, if we add an integer, then it relates to the
     font size. So font-size * line-height. However, we can use units as well. A regular integer is better
     though, because then it depends on the base font size. Helps with accessibility as well. */
    line-height: 1.5;

    /*text-decoration: line-through wavy red;*/
    /*text-shadow: 4px 4px 2px gray;*/
}

#plus {
    background: rgba(213, 255, 220, 0.95);
}

#free {
    background: rgba(234, 252, 237, 0.95);
}

#premium {
    background: rgba(14, 79, 31, 0.95);
}

#premium .package__title {
    color: white;
}

#premium .package__sub-title {
    color: #bbb;
}

/* text-align right cannot be used as there's no inline element. float can be used in this case, but
it can produce strange issues, so it's not that widely used anymore these days. Flex is more popular.
float means that you want to overwrite the default positioning of an element and then push it elsewhere.
It takes an element out of the document flow. By default it could be used to position an image inside
of text. With elements, however, it needs a bit of a hack, to make sure that the elements don't take up
its position. */
#free {
    float: right;
    border-right: none;
    border-left: 2px solid #0e4f1f;
    box-shadow: 2px 2px 2px 2px rgba(0, 0, 0, 0.3);
    text-align: right;
}

/* Clear floats on both sides (left and right, which are the values that can be assigned to float).
Everything that comes after this class will not respect previous floats.
 */
.clearfix {
    clear: both;
}

/* All of our elements have a default z-index. It's set to auto and generally auto defaults to 0.
If you want to change the z-index, then you have to apply the position property. The z-index can also
be negative. So since we want our background image to be underneath all of the other elements, then
we should apply a minus z-index.
When using a non-static position, then each element has their own stacking context within them.
That means that the elements within a non-static position element compete only with the
other children of that parent when using z-index. If the parent has a lower z-index than non-static position
element, but the child has a higher one than the other non-static position element, then
that child will still be underneath the other non-static position element, as its z-index
would only apply in the context of that parent.
*/
.background {
    /*Background is actually just a shorthand. More things can be defined for the background.*/
    background: url('../images/plans-background.jpg');
    /* Filters are a way of changing the look of the element. For example you could blur the pixels.
    There are a lot of options. More than one filter can be applied. IE does not support filter.*/
    filter: grayscale(40%);
    background-repeat: no-repeat;
    /*The cover property decides which property to use - width or height, depending on which is larger.
    It then decides which to use to fill the area, either width 100% or height 100%. It even zooms in
    if the element is smaller than your container. cover is the best option to make sure that there is
    no whitespace.

    An alternative could be contain, which makes sure that the entire image is in the container. So nothing
    would get cropped based on which dimension is higher. You'll most likely get whitespace with this.*/
    background-size: cover;
    /* The background position property works different based on the unit that you use. If you use pixels,
    then it gets pushed from that edge by the number of pixels, causing whitespace.
    If you use percentages, then*/
    background-position: 10px;
    width: 100vw;
    height: 100vh;
    position: fixed;
    top: 0;
    left: 0;
    z-index: -1;
}

/*
If none of the parents of the element have a position property set, then it defaults to positioning relative
to the <html> element. If we have a position defined, then the positioning context for the absolute element
would be the closest parent with the position defined.
*/
.package__badge {
    position: absolute;
    top: 0;
    right: 0;
    margin: 0;
    font-size: 0.75rem;
    color: white;
    background: #ff5454;
    padding: 0.5rem;
    /* Using transform keeps the element in the document flow for normal elements. So if you want to only move it visually,
     then it's good to use this instead of changing the position. */
    transform: rotateZ(45deg);
    /* Transforms happen around the center of the element by default. It can be changed using the transform-origin property.
     Can use word or unit values. */
    transform-origin: center;
}

@media (min-width: 40rem) {
    main {
        margin: 3rem auto;
        max-width: 1500px;
    }
}

@media (min-width: 1500px) {
    .package {
        border-left: 4px solid #0e4f1f;
    }

    #free {
        border-right: 4px solid #0e4f1f;
    }


}