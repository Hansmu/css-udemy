* {
    box-sizing: border-box;
    font-size: 1.5rem;
}

html {
    background: #b3b3b3;
    padding: 5px;
}

body {
    background: #b3b3b3;
    padding: 5px;
    margin: 0;
}

/*
As soon as we apply flex, then we can see that the child elements get put into a single row.
The height of the row is defined by the tallest item. Once the container gets smaller than the
elements, then overflow starts happening as usual. So it acts like a regular block level element.
*/
.flex-container {
    background: white;
    padding: 10px;
    border: 5px solid black;
    height: 800px;
    /*inline-flex makes it behave like an inline element. So it takes up the amount of space that
    is required by the children and it doesn't resize on window size change.*/
    display: flex;
    /* Whenever you apply display flex, then two additional properties get automatically applied -
     flex-direction, with a default value of row and flex-wrap, with a default value of nowrap.*/
    /* column would put them into a column. It would also separate them into separate columsn, provided
    that the surrounding container has a fixed height.
    Can reverse them by adding row-reverse, column-reverse. */
    flex-direction: row;
    /* With wrap as the size of the window decreases, then the elements jump into a new row as room
     runs out. Additionally, on the new row, they take up the amount of space that the tallest item
     wants on that specific row. So if a fixed height element stays on the previous row, then the
     next row will be shorter, based on the tallest element in that row.
     Thus each flex row height depends on the highest element within that row.*/
    /* wrap-reverse sends the overflowing elements to a new row at the start, instead of creating
     a new row at the end. Additionally, the fixed height elements that are smaller than the tallest
     element in the row will get aligned to the bottom of that row, instead of the top.*/
    flex-wrap: wrap;
    /* flex-flow: row wrap; can be used as a shorthand */

    /*
    align-items property aligns the items in a certain way within the cross-axis row.
    stretch is the default value for align items. Stretch says that the other elements without
    a defined height should be stretched to be as tall as the tallest element. When defining anything
    else, then they only take up as much room as they need to.
    The align items property states how to align the items on the cross axis.
    When using center, then we say that our elements should be centered on the cross axis.
    flex-start to align at the start of the cross axis.
    flex-end to align at the end of the cross axis.
    */
    align-items: center;

    /* justify-content can be used to align the elements along the main axis. */
    justify-content: center;

     /*align-content is used to align the cross axis rows. The default is stretch, which means that
      the rows will evenly distribute and take up all the space available. So with 3 rows, each row would
      take up 33.33% of space.
      align-content center would put all of the rows at the center of the screen. Instead of stretching, then
      each row would be at the center and each row would take up only as much space as it needs. But the anchor
      point for the rows would be the midpoint of the cross axis.+
      */
    align-content: center;
}

.item-1 {
    background: #ff7300;
    color: white;
    padding: 10px;
    border: 5px solid black;
    margin: 10px;
}

.item-2 {
    background: #ff9640;
    color: white;
    padding: 10px;
    border: 5px solid black;
    margin: 10px;
    width: 250px;
    font-size: 1.8rem;
}

.item-3 {
    background: #ff9640;
    color: white;
    padding: 10px;
    border: 5px solid black;
    margin: 10px;
    height: 250px;
    /* Can apply the align properties to the item itself, instead of the entire row/column. */
    align-self: center;
}

.item-4 {
    background: #f5c096;
    color: white;
    padding: 10px;
    border: 5px solid black;
    margin: 10px;
    width: 300px;
    height: 300px;
    /* The default value for order is 0. If we want the element to be after the rest of the elements,
    then we add 1. If we want it to be before, then we add -1. So the higher values go to the end and
    the lower values go to the start. */
    order: 0;
}

.item-5 {
    background: #d3c0b1;
    color: white;
    padding: 10px;
    border: 5px solid black;
    margin: 10px;
    width: 350px;
    /* Has an initial value of 0. It can be used to define how much of the remaining space should be
     used up by the element. If it has flex-grow > 0 and no other element has flex-grow, then it will
     use up all of the space that is unused. If more elements have flex-grow, then the sum of those
     is taken. So for example 1 element has flex-grow 2, another has flex-grow 3, then the remaining
     space is divided by 5 and 2 parts of it is given to 1 element, and 3 is given to another. That
     applies if they're on the same line. However, if in such a situation the other element gets pushed
     onto a new line, then the first element will occupy the remaining space on the first row and the
     second element would occupy the remaining space on the second row. If it's alone on the second row,
     then it'll take up all of the space. */
    flex-grow: 0;
}

.item-6 {
    background: #d3c0b1;
    color: white;
    padding: 10px;
    border: 5px solid black;
    margin: 10px;
    width: 350px;
}