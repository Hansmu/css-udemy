.container {
    margin: 20px;
    /* Create a grid container. Only the direct children of that container are considered part of the grid.*/
    display: grid;

    /* Allows to overwrite the default 1 column that we have. Defines the width of the columns.
    A special unit that we can use inside of a grid is fr for fraction. It takes the remaining space and
    divides it between all the columns with the fr unit and separate it between them accordingly. */
    /*grid-template-columns: 200px 2fr 20% 1fr;*/

    /* If you don't want to have such differently defined columns, but would rather want to have say
     4 x 25% columns, then you could use another way. You could use a helper CSS method for that.
     With repeat you define how many times you want to repeat something and then what you want to repeat.*/
    grid-template-columns: repeat(4, 25%);
    /* You can create automatically generated named rows using the following syntax. This gives us
    an automatically named area called "hd" that we can reference. However, defining the areas
    explicitly is clearer. */
    /* grid-template-columns: [hd-start] repeat(4, [col-start] 25% [col-end]) [hd-end];*/
    /* grid-template-rows: [hd-start] 5rem [hd-end row-2-start] minmax(10px, 200px) [row-2-end row-3-start] 100px [row-3-end];*/

    /* To explicitly define rows.
    auto can be used to take up as much space as the content requires. If we define a height for the container,
    then auto takes up as much space as is left. It takes up as much space as is left in the columns by default
    if used there.*/
    /* The minmax helper method can be used to define the maximum height that the element can have and the
    minimum it should have. Could also use auto in there. */
    /*grid-template-rows: 5rem minmax(10px, 200px);*/

    /* We can use numbers to refer to lines, but we could also name our lines. You can add multiple names.*/
    grid-template-rows: [row-1-start] 5rem [row-1-end row-2-start] minmax(10px, 200px) [row-2-end row-3-start] 100px [row-3-end];

    /* Able to add gaps between the elements */
    grid-column-gap: 10px;
    grid-row-gap: 5px;
    /* Shorthand */
    /*grid-gap: 5px 10px;*/
    /* In order to create named areas, then we have to define rows in strings. Since we have 4 columns and we
     want our header element to take up the entire row, then we define header four times. A dot can be
     used to define where you want to leave the area empty. You have to have all of the columns defined
     otherwise you'll get an invalid property error. Undefined cells, however, simply get hidden.*/
    /* Grid area does not respect the DOM order if it's so defined. */
    grid-template-areas: "header header header header"
                         ". . main main"
                         "footer footer footer footer";
    /* In order to position the elements within their grid columns.
    center puts them in the middle of the area.
    start at the start of the area.
    end at the end of the area.
    stretch is the default and it makes the element fit the area. When stretch isn't defined, then the elements take up
    only as much space as they need.
    Start and end don't mean left and right. It depends on the read direction set on the browser. If the read direction
    is set from right to left, then start means right and end means left.
    */
    justify-items: center;

    /* In order to position the elements within their grid rows. The same options apply as to justify-items.*/
    align-items: center;
}

.el1 {
    background: rgba(255, 154, 72, 0.5);
}

.el2 {
    background: rgba(255, 0, 0, 0.5);

    /*!* You can tell a column to span the entire row by using -1 in the end. That means that the*/
    /* element should start counting from the end. In our example with 4 columns that would mean that it*/
    /* gets set to 5.*!*/
    /*grid-column-start: 1;*/
    /*grid-column-end: -1;*/

    /*!* This creates an overlap with our element 3. Elements can overlap in a grid. They can occupy the*/
    /* same cell if you explicitly create such a situation. The grid tries to avoid this by default. The*/
    /* DOM order is important when deciding which one is on top. As element 3 comes after element 2, then it is*/
    /* on top. We can change this using z-index as the grid supports it. *!*/
    /*!*grid-row-start: 2;*!*/
    /*!* After naming we can refer to the lines using our named references. *!*/
    /*grid-row-start: row-2-start;*/
    /*grid-row-end: span 1; !* This is the default, so could technically be omitted. *!*/

    /* The shortend for that would be */
    /* grid-row: row-2-start/span 1 */

    grid-area: main;
}

.el3 {
    background: rgba(0, 128, 0, 0.5);
    /* CSS grid thinks in terms of lines.  */
    /*grid-column-start: 3;*/

    /*!* By default it would span one cell, but we can tell it to span more. *!*/
    /*!*grid-column-end: 5;*!*/

    /*!* Another way of telling it how many cells to span can be done using the span keyword. *!*/
    /*grid-column-end: span 2;*/

    /*grid-row-start: 1;*/
    /*!* We set it to 3, as 2 marks the end of the first row. One row or cell has a line it starts from and*/
    /* a line it ends on. Where it ends, another cell/row begins. So 1 marks the start of the first row and*/
    /* 2 marks the end of the first row and the start of the second one. If we'd set it to 2, then it'd only*/
    /* run until the start of the second unit, thus not spanning it. So 3 marks the end of the second row.*!*/
    /*grid-row-end: 3;*/

    /* Grid area can be used to define all of the properties */
    /* grid-area: row-1-start / 2 / grid-2-end / span 3 */

    /* No longer have to define where it starts and ends or how much it spans. It's defined in the grid
    container.*/
    grid-area: header;
}

.el4 {
    background: rgba(0, 4, 255, 0.5);
    grid-area: footer;
}